import numpy as np
import matplotlib.pyplot as plt
from matplotlib import animation
import time

L = 10

# The grid is n+1 points along x and y, including boundary points 0 and n
n_list = [10,20]

# The grid spacing is L/n

# The number of iterations
#nsteps = 10
nsteps = [29,113]
error_max = []
V_exact = 10

for nsteps, n in zip(nsteps, n_list):
    start_time = time.time()

    # Initialize the grid to 0
    v = np.ones((n+1, n+1)) * 9
    #vnew = np.zeros((n+1, n+1)) 

    # Set the boundary conditions
    for i in range(1,n):
        v[0,i] = 10
        v[n,i] = 10
        v[i,0] = 10
        v[i,n] = 10

    fig = plt.figure()
    ax = fig.add_subplot(111)
    im = ax.imshow(v, cmap=None, interpolation='nearest')
    fig.colorbar(im)

    # checker=1: no checkboard, checker=2: checkerboard (note: n should be even)
    checker = 1
    end_time = 0

    # perform one step of relaxation

    def relax(n, v, checker):
        error_array = []
        for check in range(0,checker):
            for x in range(1,n):
                for y in range(1,n):
                    if (x*(n+1) + y) % checker == check:
                        v[x,y] = (v[x-1][y] + v[x+1][y] + v[x][y-1] + v[x][y+1])*0.25
                        error = abs(V_exact-v[x,y])
                    error_array.append(error)
        maxi = max(error_array)
        print(str(maxi))
        error_max.append(maxi)

            # Copy back the new values to v
            # Note that you can directly store in v instead of vnew with Gauss-Seidel or checkerboard
            #for x in range(1,n):
            #    for y in range(1,n):
            #        if (x*(n+1) + y) % checker == check:
            #            v[x,y] = vnew[x,y]

    def update(step):
        print(step)
        global n, v, checker, end_time

        # FuncAnimation calls update several times with step=0,
        # so we needs to skip the update with step=0 to get
        # the correct number of steps 
        if step > 0:
            relax(n, v, checker)
            end_time = time.time()

        im.set_array(v)
        return im,

    def exercise_42b():
        # we generate nsteps+1 frames, because frame=0 is skipped (see above)
        anim = animation.FuncAnimation(fig, update, frames=nsteps+1, interval=200, blit=True, repeat=False)
        plt.show()

        # Calculate execution time
        #end_time = time.time()              # end time
        ex_time = end_time-start_time
        print("No. of iterations:", nsteps, "took time:", ex_time)

def exercise_42a():
    '''#step = 1
    saved_desire = []
    ## Plotting
    for step in range(1,200):
        update(step)

        v_list = v[int(n[0]/2)].tolist()
        desired = v_list[int(n[0]/2)]
        print(desired)

        # # Condition to achieve 1% accuracy of the desired potential
        if desired >= 9.9:
            print("1 percent accuracy after:", step, "iterations")
            break   
        step += 1 
        saved_desire.append(desired)'''

    '''new = error_max[:len(error_max)]
    print(len(new))
    plt.figure(1)
    plt.title("Accuracy with different grid sizes")
    plt.xlabel("Number of iterations")
    plt.ylabel("Max error")
    plt.plot(range(0,len(new)), new, "b", label="Grid size "+ str(L/n[1]))
    plt.plot(range(0, len(new)), [0.01]*len(new), 'r', label="1%")
    plt.legend()
    plt.show()'''
    
    # 10.11a
    # # The center of the matrix represents the desired potential 
       


def main():
    exercise_42b()


if __name__ == "__main__" :
    main()

